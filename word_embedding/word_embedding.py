"""
Word Embedding Module

@author: Ruchika Chhabra
"""

#!/usr/bin/python
import csv
import gensim 
import numpy
import sys
import re
import operator

class WordEmbedding():
	'''
	This class has the following functionality:
	1. Reads the input text file, containing sentences to be clustered.
	2. Loads the word2vec pre-trained model.
	3. Finds vector corresponding to each input sentence.
	4. Creates an output CSV file containing input sentence and 
	   corresponding vector representation.

	Attributes:
	-----------
	1. input_file_path: Input text file containing sentences, which
						are to be represented in vector format.
	2. word2vec_model : Path of word2vec pre-trained model.
	3. word_vector_dim: Dimension of vector to be generated for input 
						sentence. 
	'''

	def __init__(self, input_file_path, word2vec_model, word_vector_dim):
		'''
		This method is called to create an instance of this class.

		Parameters
		----------
		1. input_file_path: Path of Input text file containing sentences,
                            which are to be represented in vector format.
        2. word2vec_model : Path of word2vec pre-trained model.
        3. word_vector_dim: Dimension of vector to be generated for input 
						    sentence. 
		'''
		self.input_file_path = input_file_path
		self.word2vec_model  = word2vec_model
		self.word_vector_dim = word_vector_dim

	def sentence_to_vector(self):
		'''
		1. This method creates vector for each input sentence read from input
		   text file.
		2. Sentence vector is generated by average of word vectors corresponding 
		   to each word in the input sentence.
		'''

		# Write an output CSV file containing sentences and 
		# corresponding vector representation.
		out_file   = open('sentence_vectors.csv','wb+')
		csv_writer = csv.writer(out_file)

		# Load pre-trained word2vec model in binary format.
		print '-LOADING WORD2VEC MODEL'
		word_model = gensim.models.KeyedVectors.load_word2vec_format(self.word2vec_model, binary= True)
		print '-LOADING COMPLETED'

		# Read Input Text File line by line
		print '-CONVERTING INPUT SENTENCES => VECTORS'
		for sentence in open(self.input_file_path):
			# sum of vectors corresponding to each word of sentence.
			sum_of_word_vectors = numpy.zeros(int(self.word_vector_dim))
			no_of_words = 0
			sentence    = re.sub('[^a-zA-Z0-9]', ' ', sentence)
			for word in sentence.split(): 
				no_of_words += 1
				try:
					# Find Vector corresponding to each word of sentence.
					sum_of_word_vectors = sum_of_word_vectors + word_model[word]
				except:
					# If vector corresponding to a word does not exist,
					# then skip that word.
					empty_vector = numpy.zeros(int(self.word_vector_dim))
					sum_of_word_vectors = sum_of_word_vectors + empty_vector
					no_of_words -=1
			avg_of_word_vec = (sum_of_word_vectors/no_of_words)
		
			# Write sentence and corresponding vector in output CSV file.
			csv_row = [sentence]
			csv_row.extend(avg_of_word_vec)
			csv_writer.writerow(csv_row)
		out_file.close()
		return 'sentence_vectors.csv'